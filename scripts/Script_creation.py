def Script_creation(filename, i, main_path, Generation, P3=True):
    if P3:
        ending = '_P3\n'
    else:
        ending = '\n'
    with open(filename, 'w') as f:
        f.write('#!/bin/csh\n')
        f.write('#SBATCH --partition=boldyrev-np\n')
        f.write('#SBATCH --account=boldyrev-np\n')
        f.write('#SBATCH --time=72:00:00\n')
        f.write('#SBATCH -o slurm-%j.out-%N\n')
        f.write('#SBATCH -e slurm-%j.err-%N\n')
        f.write('#\n')
        f.write('# Insert proper account, partition,node count and walltime specifications above \n')
        f.write('# Note that you do not set the ntasks at all\n')
        f.write('# \n')
        f.write('#\n')
        f.write('# It is also best to specify your account (typically your PI last name)\n')
        f.write('#\n')
        f.write('# Other node specifications such as memory can also be added to above, as well\n')
        f.write('# as qos specifications.\n')
        f.write('# Add job name on PBS -N line above; this will become name for stderr and stdout,\n')
        f.write('# with extensions e#### and o#### respectively, where #### is the job number\n')
        f.write('#\n')
        f.write('# Put in proper WORKDIR, FILENAME in the first two lines below, respectively\n')
        f.write('#\n')
        f.write('# Set SCRFLAG to one of the following -- note LOCAL is usually the best choice\n')
        f.write('# unless you know your job needs more space than is available:\n')
        f.write('#       LOCAL for use of space local to nodes\n')
        f.write('#       GENERAL for the general CHPC lustre scratch\n')
        f.write('#       KPSERIAL for serial scratch on all clusters but lonepeak\n')
        f.write('#\n')
        f.write('# Set  NODES in a manner consistent to the SBATCH -l line above\n')
        f.write('#\n')
        f.write('#\n')
        f.write('# Also make sure %nprocs and %mem are set properly in the com file!\n')
        f.write('# Allow at least 64MB of the memory available per node for the OS\n')
        f.write('# I have not found any additional limitations of memory use\n')
        f.write('#\n')
        f.write('env | grep SLURM\n')
        f.write('\n')
        f.write('setenv WORKDIR '+main_path+'/Generation_'+str(Generation)+ending)
        f.write('setenv FILENAME particle_'+str(i)+'\n')
        f.write('setenv SCRFLAG GENERAL\n')
        f.write('setenv NODES 1\n')
        f.write('#\n')
        f.write('# nothing should need changed below here to run unless you do not\n')
        f.write('# want to use the default version of Gaussian; in this case the\n')
        f.write('# g16root path will need to be changed\n')
        f.write('#\n')
        f.write('cd $WORKDIR\n')
        f.write('\n')
        f.write('# Load appropriate version of Gaussian16 for the instruction set on the processor. \n')
        f.write('# Choices are:\n')
        f.write('#    E6B for AVX2 (notchpeak nodes, 24 and 28 core nodes on kingspeak and ash)\n')
        f.write('#    E6A for AVX (16 and 20 core nodes on kingspeak, 20 core nodes on ash, tangent nodes)\n')
        f.write('#    E64 for SSE4 (ember and lonepeak nodes, 12 core nodes on ash)\n')
        f.write('#    E6L for none of the ones listed (legacy, not be needed on CHPC clusters)\n')
        f.write('# Note that the newer processors have the older instructions sets such that the\n')
        f.write('# differen versions are backwards compatible -- therefore the E6L and the E64 will \n')
        f.write('# run all all nodes, but the performance is impacted and the runs will be slower\n')
        f.write('# than if you used the ones listed\n')
        f.write('\n')
        f.write('if ($UUFSCELL ==  "lonepeak.peaks" | $UUFSCELL ==  "ember.arches" ) then\n')
        f.write('   module load gaussian16/E64.B01\n')
        f.write('endif     \n')
        f.write('if ( $UUFSCELL ==  "tangent.peaks") then\n')
        f.write('   module load gaussian16/E6A.B01\n')
        f.write('endif\n')
        f.write('if ( $UUFSCELL ==  "notchpeak.peaks") then\n')
        f.write('   module load gaussian16/E6B.B01\n')
        f.write('endif\n')
        f.write('if ($UUFSCELL ==  "kingspeak.peaks") then\n')
        f.write('  if ($SLURM_CPUS_ON_NODE == 24 | $SLURM_CPUS_ON_NODE == 28 ) then\n')
        f.write('                module load gaussian16/E6B.B01\n')
        f.write('  else \n')
        f.write('                module load gaussian16/E6A.B01 \n')
        f.write('  endif\n')
        f.write('endif          \n')
        f.write('if ($UUFSCELL ==  "ash.peaks") then\n')
        f.write('  if ($SLURM_CPUS_ON_NODE == 12 ) then\n')
        f.write('                module load gaussian16/E64.B01\n')
        f.write('  else if ($SLURM_CPUS_ON_NODE == 20 ) then\n')
        f.write('                module load gaussian16/E6A.B01\n')
        f.write('  else\n')
        f.write('                module load gaussian16/E6B.B01 \n')
        f.write('  endif\n')
        f.write('endif\n')
        f.write('\n')
        f.write('env | grep gaussian\n')
        f.write('ml\n')
        f.write('\n')
        f.write('setenv MP_NEWJOB yes\n')
        f.write('setenv LINDA_CLC network\n')
        f.write('setenv LINDA_FLC network\n')
        f.write('\n')
        f.write('if ("$SCRFLAG" == "LOCAL") then\n')
        f.write('  setenv GAUSS_SCRDIR  /scratch/local/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('  mkdir -p /scratch/local/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('  mkdir -p $WORKDIR/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('   cd $WORKDIR/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('   cp $WORKDIR/$FILENAME.com .\n')
        f.write('d\n')
        f.write('   cp $WORKDIR/$FILENAME.chk .\n')
        f.write('   cp $WORKDIR/test*.com .\n')
        f.write('endif\n')
        f.write('\n')
        f.write('if ("$SCRFLAG" == "KPSERIAL") then\n')
        f.write('  setenv GAUSS_SCRDIR  /scratch/kingspeak/serial/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('  mkdir -p /scratch/kingspeak/serial/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('   cd /scratch/kingspeak/serial/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('   cp $WORKDIR/$FILENAME.com .\n')
        f.write('   cp $WORKDIR/$FILENAME.chk .\n')
        f.write('endif\n')
        f.write('\n')
        f.write('if ("$SCRFLAG" == "GENERAL") then\n')
        f.write('  setenv GAUSS_SCRDIR  /scratch/general/lustre/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('  mkdir -p /scratch/general/lustre/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('   cd /scratch/general/lustre/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('   cp $WORKDIR/$FILENAME.com .\n')
        f.write('   cp $WORKDIR/$FILENAME.chk .\n')
        f.write('endif\n')
        f.write('\n')
        f.write('if ("$SCRFLAG" == "LPSERIAL") then\n')
        f.write('  setenv GAUSS_SCRDIR  /scratch/lonepeak/serial/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('  mkdir -p /scratch/lonepeak/serial/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('   cd /scratch/lonepeak/serial/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('   cp $WORKDIR/$FILENAME.com .\n')
        f.write('   cp $WORKDIR/$FILENAME.chk .\n')
        f.write('endif\n')
        f.write('\n')
        f.write('printenv\n')
        f.write('#echo $GAUSS_SCRDIR\n')
        f.write('#echo $SHELL\n')
        f.write('#echo $SLURM_NODELIST\n')
        f.write('\n')
        f.write('if ("$NODES" == "1") then\n')
        f.write('    srun g16 $FILENAME.com\n')
        f.write('else\n')
        f.write('srun hostname -s | sort -u > tsnet.nodes.$SLURM_JOBID\n')
        f.write('cat tsnet.nodes.$SLURM_JOBID | uniq > nodes.tmp\n')
        f.write('setenv GAUSS_LFLAGS '+"'"+'-nodefile tsnet.nodes.$SLURM_JOBID -opt "Tsnet.Node.lindarsharg: ssh'+"'"+'\n')
        f.write('#    cat $SLURM_NODELIST | uniq > nodes.tmp\n')
        f.write('    source /uufs/chpc.utah.edu/sys/installdir/gaussian16/etc/parascript.csh > Default.Route\n')
        f.write('    g16 $FILENAME.com\n')
        f.write('endif\n')
        f.write('\n')
        f.write('# Clean up scratch space\n')
        f.write('\n')
        f.write('if ("$SCRFLAG" == "KPSERIAL") then\n')
        f.write('  cp *.log $WORKDIR/.\n')
        f.write('  cp *.chk $WORKDIR/.\n')
        f.write('  cp Test.FChk $WORKDIR/$FILENAME.FChk\n')
        f.write('  cd ..\n')
        f.write('  rm -r /scratch/kingspeak/serial/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('endif\n')
        f.write('if ("$SCRFLAG" == "GENERAL") then\n')
        f.write('  cp *.log $WORKDIR/.\n')
        f.write('  cp *.chk $WORKDIR/.\n')
        f.write('  cp Test.FChk $WORKDIR/$FILENAME.FChk\n')
        f.write('  cd ..\n')
        f.write('  rm -r /scratch/general/lustre/$USER/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('endif\n')
        f.write('if ("$SCRFLAG" == "LOCAL") then\n')
        f.write('  cp *.log $WORKDIR/.\n')
        f.write('  cp *.chk $WORKDIR/.\n')
        f.write('  cp Test.FChk $WORKDIR/$FILENAME.FChk\n')
        f.write('  cd ..\n')
        f.write('  rm -r $WORKDIR/$SLURM_JOB_ID/$UUFSCELL\n')
        f.write('endif\n')
        f.write('\n')
        f.write('#----- End of g16job ---------\n')
        f.write('\n')